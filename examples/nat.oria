type Bool = False
          | True
type Nat = Zero | Succ(Nat)

type Singleton = 
  | Cons

type Alias = Singleton

impl Nat {
  def is_zero(self : Nat) : Bool => match self {
    Nat::Zero => return True,
    Nat::Succ(_) => return False
  }

  def is_succ(self : Nat) : Bool => match self {
    Nat::Zero => return False,
    Nat::Succ(_) => return True
  }

  def add(self : Nat, other : Nat) : Nat => match self {
    Nat::Zero => return other,
    Nat::Succ(prev) => return Nat::Succ(prev.add(other=other))
  }
  
  # Just testing the parser
  def test_struct_parse(self : Nat) : Nat => {
    let x = Point { a: 1, b: 2, c: 3 }
    match Point { a : 1, b : 2, c : 3 } {
      Point { a:x, b:y, c: z } => 1
    }
    return x.a
  }
}