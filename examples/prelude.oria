type builtin @i8 
type builtin @i16
type builtin @i32
type builtin @i64
type builtin @u8 
type builtin @u16
type builtin @u32
type builtin @u64
type builtin @f32
type builtin @f64

type builtin @isize
type builtin @usize

type builtin @ptr(Type)
type builtin @array(@usize, Type)
type builtin @slice(Type)

type @char = @u32
type @str  = @slice(@u8)

def builtin @add_i8(@i8, @i8) : @i8
def builtin @add_i16(@i16, @i16) : @i16
def builtin @add_i32(@i32, @i32) : @i32
def builtin @add_i64(@i64, @i64) : @i64
def builtin @add_u8(@u8, @u8) : @u8
def builtin @add_u16(@u16, @u16) : @u16
def builtin @add_u32(@u32, @u32) : @u32
def builtin @add_u64(@u64, @u64) : @u64
def builtin @add_f32(@f32, @f32) : @f32
def builtin @add_f64(@f64, @f64) : @f64

def builtin @add_isize(@isize, @isize) : @isize
def builtin @add_usize(@usize, @usize) : @usize

def builtin @sub_i8(@i8, @i8) : @i8
def builtin @sub_i16(@i16, @i16) : @i16
def builtin @sub_i32(@i32, @i32) : @i32
def builtin @sub_i64(@i64, @i64) : @i64
def builtin @sub_u8(@u8, @u8) : @u8
def builtin @sub_u16(@u16, @u16) : @u16
def builtin @sub_u32(@u32, @u32) : @u32
def builtin @sub_u64(@u64, @u64) : @u64
def builtin @sub_f32(@f32, @f32) : @f32
def builtin @sub_f64(@f64, @f64) : @f64

def builtin @sub_isize(@isize, @isize) : @isize
def builtin @sub_usize(@usize, @usize) : @usize

def builtin @mul_i8(@i8, @i8) : @i8
def builtin @mul_i16(@i16, @i16) : @i16
def builtin @mul_i32(@i32, @i32) : @i32
def builtin @mul_i64(@i64, @i64) : @i64
def builtin @mul_u8(@u8, @u8) : @u8
def builtin @mul_u16(@u16, @u16) : @u16
def builtin @mul_u32(@u32, @u32) : @u32
def builtin @mul_u64(@u64, @u64) : @u64
def builtin @mul_f32(@f32, @f32) : @f32
def builtin @mul_f64(@f64, @f64) : @f64

def builtin @mul_isize(@isize, @isize) : @isize
def builtin @mul_usize(@usize, @usize) : @usize

def builtin @div_i8(@i8, @i8) : (@i8, @i8)
def builtin @div_i16(@i16, @i16) : (@i16, @i16)
def builtin @div_i32(@i32, @i32) : (@i32, @i32)
def builtin @div_i64(@i64, @i64) : (@i64, @i64)
def builtin @div_u8(@u8, @u8) : (@u8, @u8)
def builtin @div_u16(@u16, @u16) : (@u16, @u16)
def builtin @div_u32(@u32, @u32) : (@u32, @u32)
def builtin @div_u64(@u64, @u64) : (@u64, @u64)
def builtin @div_f32(@f32, @f32) : @f32
def builtin @div_f64(@f64, @f64) : @f64

def builtin @div_isize(@isize, @isize) : (@isize, @isize)
def builtin @div_usize(@usize, @usize) : (@usize, @usize)

type Int8 =  record { 
  value : @i8
}

type Int16 =  record { 
  value : @i16
}

type Int32 =  record { 
  value : @i32
}

type Int64 =  record { 
  value : @i64
}

type UInt8 =  record { 
  value : @u8
}

type UInt16 =  record { 
  value : @u16
}

type UInt32 =  record { 
  value : @u32
}

type UInt64 =  record { 
  value : @u64
}

type Float32 =  record { 
  value : @f32
}

type Float64 =  record { 
  value : @f64
}

type Int =  record { 
  value : @isize 
}

type UInt =  record { 
  value : @usize 
}

def builtin @llvm_ir(@str) : Unit
def builtin @asm(@str) : Unit

def builtin @typeof(implicit T, x : T) => T

def the(T : Type, x : T) : T => x

def id(implicit T : Type, x : T) : T => x

type Void

type PhantomData(T : Type)

type Equal(implicit A : Type, implicit B : Type, x : A, y : B) =
  | Refl(implicit A : Type, implicit x : A) : Equal(x, x) 

# the(Equal(2, 3), Refl) shall fail to typecheck

type Ordering =
  | Lt | Eq | Gt 

type Option(T : Type) = 
  | None 
  | Some(T)

type Either(L : Type, R : Type) =
  | Left(L) 
  | Right(R)

type Result(T : Type, E : Type) =
  | Ok(T) 
  | Err(E)
