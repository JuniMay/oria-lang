let x = fn(1)(2)(3)
let y = 1.2e+5f32

let integer = 0x1232u32
let underlined_number = 0b1010_0011_0101_1001u64

let x : Type123 = Type122

let x = 10
let b = x + 10

# Defining a record type.
type Point(T : Type) = { x : T, y : T }

# Defining an ADT.
type Power = Pedal : Power
           | Petrol # Type can be omitted.
           | Electric : Power
           

type Vehicle(Power : Type)
    = Bike : Vehicle(Pedal)
    | Car(fuel : Nat) : Vehicle(Petrol)
    | Bus(fuel : Nat) : Vehicle(Petrol)
    | ECar(battery : Nat) : Vehicle(Electric)
    

type List(T : Type)
    = Nil
    | Cons(T, List(T)) : List(T)
    

type Void

let fn = (x: Type, mut y : Int) : Int => match x {
    # Just testing the parser
    (1) => 1,
    _ => 2,
    { x: _, y: _, .. } => 3,
    1..=2 => {
       let x = 1 + 2
       x + 1
       let y = Point {
           x : 1,
           y : 2
       }.x + 1
       if x == 1 {
          x + 1
       } else {
          x = x + 1
       }
    }
}

let a_fn_ty = <T : Type>(comptime T, Int, mut Int) -> Int